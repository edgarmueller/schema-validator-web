# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.http.secret.key = ${APP_SECRET}

# The application languages
# ~~~~~
play.i18n.langs=["en"]

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

play.filters {
  headers {
    contentSecurityPolicy = "default-src 'self' data;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data:;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' fonts.googleapis.com;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.googleapis.com fonts.gstatic.com;"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self';"
    contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self';"
  }
  hosts {
    allowed = ["."]
  }

  csrf {
    cookie.name = "XSRF-TOKEN"
    header.name = "X-XSRF-TOKEN"
  }
}

include "application.local.conf"